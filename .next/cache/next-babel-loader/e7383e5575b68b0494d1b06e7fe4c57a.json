{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5257/api';\nconst GOONG_MAP_URL = 'https://maps.goong.io';\nexport const parkingLotService = {\n  getParkingLots: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/ParkingLots`);\n      return response.data.map(lot => _objectSpread(_objectSpread({}, lot), {}, {\n        types: [\"parking\"],\n        url: `${GOONG_MAP_URL}/?pid=${generatePID(lot)}`,\n        status: \"OK\"\n      }));\n    } catch (error) {\n      console.error('Error fetching parking lots:', error);\n      throw error;\n    }\n  },\n  searchParkingLots: async keyword => {\n    try {\n      const response = await axios.get(`${API_URL}/ParkingLots?search=${keyword}`);\n      return response.data.map(lot => _objectSpread(_objectSpread({}, lot), {}, {\n        types: [\"parking\"],\n        url: `${GOONG_MAP_URL}/?pid=${generatePID(lot)}`,\n        status: \"OK\"\n      }));\n    } catch (error) {\n      console.error('Error searching parking lots:', error);\n      throw error;\n    }\n  }\n};\n\n// Hàm tạo PID cho URL (có thể thay đổi theo logic của bạn)\nconst generatePID = lot => {\n  return btoa(`parking_${lot.id}_${lot.latitude}_${lot.longitude}`);\n};\nexport const {\n  getParkingLots,\n  searchParkingLots\n} = parkingLotService;","map":{"version":3,"names":["axios","API_URL","GOONG_MAP_URL","parkingLotService","getParkingLots","response","get","data","map","lot","_objectSpread","types","url","generatePID","status","error","console","searchParkingLots","keyword","btoa","id","latitude","longitude"],"sources":["D:/Workhome/ParkingLot/live-map/services/parkingLotService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5257/api';\r\nconst GOONG_MAP_URL = 'https://maps.goong.io';\r\n\r\nexport const parkingLotService = {\r\n\tgetParkingLots: async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await axios.get(`${API_URL}/ParkingLots`);\r\n\t\t\treturn response.data.map(lot => ({\r\n\t\t\t\t...lot,\r\n\t\t\t\ttypes: [\"parking\"],\r\n\t\t\t\turl: `${GOONG_MAP_URL}/?pid=${generatePID(lot)}`,\r\n\t\t\t\tstatus: \"OK\"\r\n\t\t\t}));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error fetching parking lots:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\r\n\tsearchParkingLots: async (keyword) => {\r\n\t\ttry {\r\n\t\t\tconst response = await axios.get(`${API_URL}/ParkingLots?search=${keyword}`);\r\n\t\t\treturn response.data.map(lot => ({\r\n\t\t\t\t...lot,\r\n\t\t\t\ttypes: [\"parking\"],\r\n\t\t\t\turl: `${GOONG_MAP_URL}/?pid=${generatePID(lot)}`,\r\n\t\t\t\tstatus: \"OK\"\r\n\t\t\t}));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error searching parking lots:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Hàm tạo PID cho URL (có thể thay đổi theo logic của bạn)\r\nconst generatePID = (lot) => {\r\n\treturn btoa(`parking_${lot.id}_${lot.latitude}_${lot.longitude}`);\r\n};\r\n\r\nexport const { getParkingLots, searchParkingLots } = parkingLotService;\r\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAC3C,MAAMC,aAAa,GAAG,uBAAuB;AAE7C,OAAO,MAAMC,iBAAiB,GAAG;EAChCC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACH,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,cAAc,CAAC;MAC1D,OAAOI,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,IAAAC,aAAA,CAAAA,aAAA,KACxBD,GAAG;QACNE,KAAK,EAAE,CAAC,SAAS,CAAC;QAClBC,GAAG,EAAE,GAAGV,aAAa,SAASW,WAAW,CAACJ,GAAG,CAAC,EAAE;QAChDK,MAAM,EAAE;MAAI,EACX,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACfC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACZ;EACD,CAAC;EAEDE,iBAAiB,EAAE,MAAOC,OAAO,IAAK;IACrC,IAAI;MACH,MAAMb,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,uBAAuBiB,OAAO,EAAE,CAAC;MAC5E,OAAOb,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,IAAAC,aAAA,CAAAA,aAAA,KACxBD,GAAG;QACNE,KAAK,EAAE,CAAC,SAAS,CAAC;QAClBC,GAAG,EAAE,GAAGV,aAAa,SAASW,WAAW,CAACJ,GAAG,CAAC,EAAE;QAChDK,MAAM,EAAE;MAAI,EACX,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACfC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACZ;EACD;AACD,CAAC;;AAED;AACA,MAAMF,WAAW,GAAIJ,GAAG,IAAK;EAC5B,OAAOU,IAAI,CAAC,WAAWV,GAAG,CAACW,EAAE,IAAIX,GAAG,CAACY,QAAQ,IAAIZ,GAAG,CAACa,SAAS,EAAE,CAAC;AAClE,CAAC;AAED,OAAO,MAAM;EAAElB,cAAc;EAAEa;AAAkB,CAAC,GAAGd,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}