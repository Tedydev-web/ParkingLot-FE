{"ast":null,"code":"import _message from \"antd/lib/message\";\nimport { takeLatest, call, put, all } from 'redux-saga/effects';\nimport * as navigation from \"../consts/navigation\";\nimport Request from \"../../utils/request\";\nexport default function* navigationSaga() {\n  yield all([takeLatest(navigation.NAVIGATION_REQUEST, navigationRequestSaga)]);\n}\nfunction directionService(params) {\n  return Request.direction(params);\n}\nfunction* navigationRequestSaga(action) {\n  try {\n    const {\n      from_place,\n      to_place,\n      vehicle\n    } = action;\n    let params = {\n      origin: {\n        latitude: from_place.geometry.location.lat,\n        longitude: from_place.geometry.location.lng\n      },\n      destination: {\n        latitude: to_place.geometry.location.lat,\n        longitude: to_place.geometry.location.lng\n      },\n      vehicle\n    };\n    const response = yield call(directionService, params);\n    if (response.status == 200 && response.data.routes.length > 0) {\n      var _response$data, _response$data$routes, _response$data2, _response$data2$route;\n      const shortest = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$routes = _response$data.routes) === null || _response$data$routes === void 0 ? void 0 : _response$data$routes.sort((r1, r2) => {\n        return r1.legs[0].distance.value - r2.legs[0].distance.value;\n      })[0];\n      const fastest = (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$route = _response$data2.routes) === null || _response$data2$route === void 0 ? void 0 : _response$data2$route.sort((r1, r2) => {\n        return r1.legs[0].duration.value - r2.legs[0].duration.value;\n      })[0];\n      const result = {\n        fastest: [fastest],\n        shortest: [shortest]\n      };\n      yield put({\n        type: navigation.NAVIGATION_SUCCESS,\n        result: result\n      });\n    } else {\n      _message.error(\"Không tìm thấy đường đi !\");\n      yield put({\n        type: navigation.NAVIGATION_FAIL,\n        result: null\n      });\n    }\n  } catch (error) {\n    _message.error(\"Không tìm thấy đường đi !\");\n    yield put({\n      type: navigation.NAVIGATION_FAIL,\n      result: null\n    });\n    throw error;\n  }\n}","map":{"version":3,"names":["takeLatest","call","put","all","navigation","Request","navigationSaga","NAVIGATION_REQUEST","navigationRequestSaga","directionService","params","direction","action","from_place","to_place","vehicle","origin","latitude","geometry","location","lat","longitude","lng","destination","response","status","data","routes","length","_response$data","_response$data$routes","_response$data2","_response$data2$route","shortest","sort","r1","r2","legs","distance","value","fastest","duration","result","type","NAVIGATION_SUCCESS","_message","error","NAVIGATION_FAIL"],"sources":["D:/Workhome/ParkingLot/live-map/redux/sagas/navigationSaga.js"],"sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport * as navigation from '../consts/navigation';\nimport Request from '../../utils/request';\nimport { message } from 'antd'\n\nexport default function* navigationSaga() {\n  yield all([\n    takeLatest(navigation.NAVIGATION_REQUEST, navigationRequestSaga),\n  ]);\n}\n\nfunction directionService(params) {\n  return Request.direction(params);\n}\n\nfunction* navigationRequestSaga(action) {\n  try {  \n    const { from_place, to_place, vehicle } = action;\n    let params = {\n      origin: { latitude: from_place.geometry.location.lat, longitude: from_place.geometry.location.lng },\n      destination: { latitude: to_place.geometry.location.lat, longitude: to_place.geometry.location.lng },\n      vehicle\n    }\n    const response = yield call(directionService, params);\n\n    if (response.status == 200 && response.data.routes.length > 0) {\n      const shortest = response.data?.routes?.sort((r1,r2) => {\n        return r1.legs[0].distance.value - r2.legs[0].distance.value;\n      })[0];\n      const fastest = response.data?.routes?.sort((r1,r2) => {\n        return r1.legs[0].duration.value - r2.legs[0].duration.value;\n      })[0];\n      const result = {\n        fastest: [fastest],\n        shortest: [shortest]\n      };\n      yield put({\n        type: navigation.NAVIGATION_SUCCESS,\n        result: result\n      })\n    } else {\n      message.error(\"Không tìm thấy đường đi !\");\n      yield put({\n        type: navigation.NAVIGATION_FAIL,\n        result: null\n      })\n    }\n\n  } catch (error) {\n    message.error(\"Không tìm thấy đường đi !\");\n    yield put({\n      type: navigation.NAVIGATION_FAIL,\n      result: null\n    })\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}