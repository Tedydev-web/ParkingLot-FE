"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFeatureStyle = getFeatureStyle;
exports.getEditHandleStyle = getEditHandleStyle;

var _constants = require("./constants");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RECT_STYLE = {
  stroke: '#7ac943',
  strokeWidth: 2,
  x: -6,
  y: -6,
  height: 12,
  width: 12
};
var CLOSING_RECT_STYLE = {
  stroke: '#7ac943',
  strokeWidth: 2,
  x: -10,
  y: -10,
  height: 20,
  width: 20
};
var CIRCLE_RADIUS = 8;
var SELECTED_STYLE = {
  stroke: '#7ac943',
  strokeWidth: 2,
  fill: '#ffff00',
  fillOpacity: 0.7
};
var HOVERED_STYLE = {
  stroke: '#7ac943',
  strokeWidth: 2,
  fill: '#7ac943',
  fillOpacity: 0.5
};
var UNCOMMITTED_STYLE = {
  stroke: '#a7a7a7',
  strokeWidth: 2,
  fill: '#a9a9a9',
  fillOpacity: 0.3
};
var INACTIVE_STYLE = UNCOMMITTED_STYLE;
var DEFAULT_STYLE = {
  stroke: '#000000',
  strokeWidth: 2,
  fill: '#a9a9a9',
  fillOpacity: 0.1
};

function getFeatureStyle(_ref) {
  var feature = _ref.feature,
      state = _ref.state;
  var renderType = feature.properties.renderType;
  var style = null;

  switch (state) {
    case _constants.RENDER_STATE.SELECTED:
      style = _objectSpread({}, SELECTED_STYLE);
      break;

    case _constants.RENDER_STATE.HOVERED:
      style = _objectSpread({}, HOVERED_STYLE);
      break;

    case _constants.RENDER_STATE.UNCOMMITTED:
    case _constants.RENDER_STATE.CLOSING:
      style = _objectSpread({}, UNCOMMITTED_STYLE);
      break;

    case _constants.RENDER_STATE.INACTIVE:
      style = _objectSpread({}, INACTIVE_STYLE);
      break;

    default:
      style = _objectSpread({}, DEFAULT_STYLE);
  }

  switch (renderType) {
    case _constants.RENDER_TYPE.POINT:
      style.r = CIRCLE_RADIUS;
      break;

    case _constants.RENDER_TYPE.LINE_STRING:
      style.fill = 'none';
      break;

    case _constants.RENDER_TYPE.POLYGON:
      if (state === _constants.RENDER_STATE.CLOSING) {
        style.strokeDasharray = '4,2';
      }

      break;

    case _constants.RENDER_TYPE.RECTANGLE:
      if (state === _constants.RENDER_STATE.UNCOMMITTED) {
        style.strokeDasharray = '4,2';
      }

      break;

    default:
  }

  return style;
}

function getEditHandleStyle(_ref2) {
  var feature = _ref2.feature,
      index = _ref2.index,
      state = _ref2.state;
  var renderType = feature.properties.renderType;
  var style = {};

  switch (state) {
    case _constants.RENDER_STATE.SELECTED:
      style = _objectSpread({}, SELECTED_STYLE);
      break;

    case _constants.RENDER_STATE.HOVERED:
      style = _objectSpread({}, HOVERED_STYLE);
      break;

    case _constants.RENDER_STATE.UNCOMMITTED:
    case _constants.RENDER_STATE.CLOSING:
      style = _objectSpread({}, UNCOMMITTED_STYLE);
      break;

    case _constants.RENDER_STATE.INACTIVE:
      style = _objectSpread({}, INACTIVE_STYLE);
      break;

    default:
      style = _objectSpread({}, DEFAULT_STYLE);
  }

  switch (renderType) {
    case _constants.RENDER_TYPE.POINT:
      style.r = CIRCLE_RADIUS;
      break;

    case _constants.RENDER_TYPE.LINE_STRING:
    case _constants.RENDER_TYPE.POLYGON:
    case _constants.RENDER_TYPE.RECTANGLE:
      if (state === _constants.RENDER_STATE.CLOSING) {
        style = _objectSpread({}, style, CLOSING_RECT_STYLE);
      } else {
        style = _objectSpread({}, style, RECT_STYLE);
      }

      break;

    default:
  }

  return style;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,